# Script de test OCR avec Docker
Write-Host "üîç Test OCR avec Docker - Vision Multimodale" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# V√©rifier que le backend est accessible
Write-Host "`n1. V√©rification du backend..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/documents/ping" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Backend accessible: $response" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend non accessible: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Cr√©er une image de test simple avec du texte
Write-Host "`n2. Cr√©ation d'une image de test..." -ForegroundColor Yellow
$testImagePath = "test_ocr_docker.png"

# Cr√©er une image PNG simple avec du texte (1x1 pixel transparent)
$bytes = [System.Convert]::FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==")
[System.IO.File]::WriteAllBytes($testImagePath, $bytes)

Write-Host "‚úÖ Image de test cr√©√©e: $testImagePath" -ForegroundColor Green

# Test d'upload et OCR
Write-Host "`n3. Test d'upload et OCR..." -ForegroundColor Yellow
try {
    $form = @{
        file = Get-Item $testImagePath
    }
    
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/documents/ocr" -Method POST -Form $form -TimeoutSec 30
    
    Write-Host "‚úÖ Upload et OCR r√©ussis!" -ForegroundColor Green
    Write-Host "   Succ√®s: $($response.success)" -ForegroundColor White
    Write-Host "   Texte extrait:" -ForegroundColor White
    Write-Host "   '$($response.data.text)'" -ForegroundColor Gray
    Write-Host "   Langue: $($response.data.language)" -ForegroundColor White
    Write-Host "   Confiance: $([math]::Round($response.data.confidence * 100, 1))%" -ForegroundColor White
    
    # V√©rifier si c'est du texte simul√© ou r√©el
    if ($response.data.text -like "*simul√©*" -or $response.data.text -like "*d√©monstration*") {
        Write-Host "‚ö†Ô∏è  Attention: Le texte semble √™tre simul√© (Tesseract non disponible)" -ForegroundColor Yellow
    } else {
        Write-Host "üéâ Succ√®s: OCR r√©el fonctionne avec Tesseract!" -ForegroundColor Green
    }
    
} catch {
    Write-Host "‚ùå Erreur lors du test OCR: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        $statusCode = $_.Exception.Response.StatusCode
        Write-Host "   Code d'erreur: $statusCode" -ForegroundColor Red
    }
} finally {
    # Nettoyer le fichier de test
    if (Test-Path $testImagePath) {
        Remove-Item $testImagePath
        Write-Host "`nüßπ Fichier de test nettoy√©" -ForegroundColor Gray
    }
}

Write-Host "`nüéâ Test OCR termin√©!" -ForegroundColor Cyan
Write-Host "Si vous voyez du texte r√©el (pas simul√©), Tesseract fonctionne correctement." -ForegroundColor Green



